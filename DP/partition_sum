
https://leetcode.com/problems/partition-equal-subset-sum/

Given a non-empty array nums containing only positive integers, find if the array can be partitioned into two subsets such that the sum of
elements in both subsets is equal.
 

Example 1:

Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].
Example 2:

Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.


class Solution {
public:

    int dp[201][40001]; 
    
    bool fun(vector<int>&nums,int i,int s){
        if(s==0){
            return true;
        }
        if(s<=0){
            return false;
        }
        if(i==nums.size()){
            return false;
        }
        if(dp[i][s]!=-1){
            return dp[i][s];
        }
        if(nums[i]<=s){
            return dp[i][s]=(fun(nums,i+1,s-nums[i]) or fun(nums,i+1,s));
        }
        return dp[i][s]=fun(nums,i+1,s);
    }
    
   
    
    bool canPartition(vector<int>& nums) {
        int s=0;
        for(auto x:nums){
            s+=x;
        }
        if(s%2==1){
            return false;
        }
        s=s/2;
        memset(dp,-1,sizeof(dp));
        fun(nums,0,s);
       
        return fun(nums,0,s);
    }
};
