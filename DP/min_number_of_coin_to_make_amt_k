https://leetcode.com/problems/coin-change/
You are given an integer array coins representing coins of different denominations and an integer amount representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return -1.

You may assume that you have an infinite number of each kind of coin.


class Solution {
public:
    //int dp[]
    int solve(vector<int>&v,int tar,int i,vector<vector<int>>&dp){
        if(tar<0 or i<0)return 1e9;
    
       if(i==0){
         //lets take example : tar=4 and v=5 we cant take it 
           // tar 12 and v[0]=3 ye we can take but how many time we need tot ake it 12/3 4 times need of 3rs coin to make 12 rupee coin
         if(tar%v[0]==0) return tar/v[0];
           return 1e9;
     }
        
        //add for memo 
        if(dp[i][tar]!=-1)return dp[i][tar];
        
        int nottake=solve(v,tar,i-1,dp);
        
        int take=1e9;
        
        if(v[i]<=tar){
            
            take=1+solve(v,tar-v[i],i,dp);
        } 
        return dp[i][tar]=min(take,nottake);
      //  return min(take,nottake);
    }
    
    int coinChange(vector<int>& coins, int amount) {
        
        vector<vector<int>>dp(coins.size()+1,vector<int>(amount+1,-1));
        int ans=solve(coins,amount,coins.size()-1,dp);
        
        if(ans==1e9)return -1;
        
        return ans; 
    }
};
