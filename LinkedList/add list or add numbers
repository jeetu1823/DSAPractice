https://leetcode.com/problems/add-two-numbers-ii/

You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

class Solution {
public:
    
    
    ListNode *rev(ListNode *l1){
        
        ListNode *prev=NULL;
        ListNode *cur=l1;
       
        
        while(cur  !=NULL){
            
            ListNode* nex = cur->next;
            
            cur->next=prev;
            prev=cur;
            cur=nex;
             
        }
        
        return prev;
    }
    
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        
        l1=rev(l1);
        l2=rev(l2);
        
        
        ListNode*ans=new ListNode(0);
        ListNode*anstemp=ans;
        
        int s=0,carray=0;
        
        while(l1!=NULL and l2!=NULL){          
                
                s=l1->val+l2->val+carray;
                carray=s/10;
                anstemp->next=new ListNode(s%10);
                
                anstemp=anstemp->next;
                
                l1=l1->next;
                l2=l2->next;
                
 
        }
        
         while(l1!=NULL ){
                
                
                s=l1->val+carray;
                carray=s/10;
                anstemp->next=new ListNode(s%10);
                
                anstemp=anstemp->next;
                
                l1=l1->next;
                 
                
            }
            
            
           while(l2!=NULL){
                
                
                s=l2->val+carray;
                carray=s/10;
                anstemp->next=new ListNode(s%10);
                
                anstemp=anstemp->next;
                
                l2=l2->next;            
        }
         
        if(carray!=0)anstemp->next=new ListNode(carray);
        return rev(ans->next);
    
    }
};
