
https://leetcode.com/problems/rotate-list/


Given the head of a linked list, rotate the list to the right by k places.



class Solution {
public:
    
    int size(ListNode *root){
        int s=0;
        while(root!=NULL){
            
            s++;
            root=root->next;
        }
        
        
        
        return s;
    }
    
    ListNode *str(ListNode*root,int x){
        
        ListNode*start=root;
        ListNode *start2=start;
        int s=1;
        while(s<x){
            start2=start2->next;
            s++;
        }
        
        start2->next=NULL;
        
        return start;
    }
    
    
    ListNode* rotateRight(ListNode* head, int k) {
        
        int n=size(head);
         
        if(head==NULL or k==0 or head->next==NULL)return head;
        
       //this wll give starting ki kiti node chahiye
        int start=n-(k%n);//this will hanle when k>n
        
         if(n==start)return head;
        
        ListNode*temp=head;
        ListNode*endpart=head;
        int x=0;
        while(temp!=NULL){
            x++;
            if(x==start){
                
                endpart=temp->next;
                temp->next=NULL;
                break;
            }
            
            temp=temp->next;
        }
        
        temp=endpart;
        
        while(temp->next!=NULL){
            temp=temp->next;
        }
        
       //////// cout<<start;
        
        temp->next=head;
        
        return  endpart;
    }
};
