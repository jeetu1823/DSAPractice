https://leetcode.com/problems/partition-list/

Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.

You should preserve the original relative order of the nodes in each of the two partitions.

Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* partition(ListNode* head, int x) {
      
        ListNode* lesser=new ListNode(0);
        ListNode* le=lesser;
          ListNode* greater=new ListNode(0);
        ListNode* ge=greater;
        
        ListNode *t=head;
        
        while(t!=NULL){
            
            if(t->val >=x ){
                
                ge->next=new ListNode(t->val);
                ge=ge->next;
            }else {
                
                le->next=new ListNode(t->val);
                le=le->next;
            }
            t=t->next;
        }
        
        le->next=greater->next;
        
        return lesser->next ;
        
        
    }
};
