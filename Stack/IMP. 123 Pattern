https://leetcode.com/problems/132-pattern/


//hints 
//thinkk about stack 
//store min elements end of the nums in anohter array

//hints2
// min array will be your first element and stack top will be your mid and nums[i] will be your last element 
// iterate from the end;
//st.top<=minv[i] then pop from the stack
if(st.top()<num[i])return true;




Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Return true if there is a 132 pattern in nums, otherwise, return false.

 




Example 1:

Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.
Example 2:

Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].
Example 3:

Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].

-------------------------------------------------------------------------------------------------------





  
    bool find132pattern(vector<int>& nums) {
     int x=INT_MAX;
        vector<int>mv;
        for(int i=0;i<nums.size();i++){
            
            x=min(x,nums[i]);
            mv.push_back(x);
            
        }
        stack<int>st;
        int n=mv.size()-1;
        
        for(int j=n;j>=0;j--){
            
            if(nums[j]>mv[j]){
                
                while(!st.empty() and st.top()<=mv[j])st.pop();
                
                if(!st.empty() and st.top()<nums[j])return true;
                
                
                st.push(nums[j]);
            }
 
        }
            
        return 0;
    }
