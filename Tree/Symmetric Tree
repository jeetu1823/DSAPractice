



https://leetcode.com/problems/symmetric-tree/

Given the root of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).

 

Example 1:


Input: root = [1,2,2,3,4,4,3]









-------------------------------------------------------------------

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 ----------------------------------------------------------------
class Solution {
public:
    
    int solve(TreeNode *rl,TreeNode *rr){
        
        if(rl==NULL or rr==NULL)return rl==rr;
        
        
        
        if(rl->val!=rr->val)return 0;
            
        
          return solve(rl->left ,rr->right) and solve(rl->right ,rr->left)  ;
      
        
    }
    
    bool isSymmetric(TreeNode* root) {
        
        return root==NULL or solve(root->left ,root->right);
    }
};
