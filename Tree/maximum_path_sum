
https://leetcode.com/problems/binary-tree-maximum-path-sum/

Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.



/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
   
    
    int solve(TreeNode *root,int &maxi){
        
        if(root==NULL )return 0;
        
         int leftsum=max(0,solve(root->left,maxi));
        int rightsum=max(0,solve(root->right,maxi));
        
        maxi=max(maxi,root->val+leftsum+rightsum);
        
        
        return root->val+max(leftsum,rightsum);
        
      
          
    }
    
    int maxPathSum(TreeNode* root) {
       int maxi=INT_MIN;
      solve(root,maxi);
        
        return maxi;
    }
};
