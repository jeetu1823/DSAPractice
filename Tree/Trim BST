https://leetcode.com/problems/trim-a-binary-search-tree/

//hints

//..check if root->val is between the low and high;
//if yes then go for 
//else o in right sizde
//if low is greater then root->val then we will search on right side











Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.


Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]





class Solution {
public:
    TreeNode* trimBST(TreeNode* root, int low, int high) {
        if(root==NULL){
            return NULL;
        }
        //here we will check the our value lies in llow and high 
        if(root->val>=low and root->val<=high){
            root->left=trimBST(root->left,low,high);
            root->right=trimBST(root->right,low,high);
            return root;
        }
        else{
            //if low is greter then val then we will go to right because it is bst
            if(root->val<low){
                return trimBST(root->right,low,high);
            }
            return trimBST(root->left,low,high);
        }
    }
