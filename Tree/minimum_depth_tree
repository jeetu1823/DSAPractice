https://leetcode.com/problems/minimum-depth-of-binary-tree/

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 2


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    //int left=0,right=0;
    int solve(TreeNode* root){
         if(root==NULL)return 0;
        
        if(root->left==NULL and root->right==NULL)return 1;
        if(root->left==NULL)return 1+minDepth(root->right);
         if(root->right==NULL)return 1+minDepth(root->left);
        
     
         return  1+min(minDepth(root->left),minDepth(root->right));
        
    }
    
    int minDepth(TreeNode* root) {
        
       
        return solve( root );
    }
};
