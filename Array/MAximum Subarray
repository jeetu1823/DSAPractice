
https://leetcode.com/problems/maximum-subarray/

Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


class Solution
{
public:
    int maxSubArray(vector<int> &nums)
    {

        int suml = 0, sum = 0;
        int ans = INT_MIN;
        int ans2 = INT_MIN;
        int l = 0, h = 0;
------------------------------------------------------
method 1
--------------------------------
        for (int i = 0; i < nums.size(); i++)
        {

            sum += nums[i];
            ans = max(ans, sum);
            if (sum < 0)
                sum = 0;
        }
-------------------------------------------------------------------------------
method 2
        //         while( h<nums.size()){

        //             sum+=nums[h];

        //             if(sum>0){
        //             ans=max(ans,sum);
        //              h++;
        //             }
        //             if(sum<=0){

        //                 ans2=max(ans2,sum);
        //                 sum=0;

        //                 h++;
        //             }
        //         }

        return ans;
    }
};
