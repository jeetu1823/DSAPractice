https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii/

Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,4,4,5,6,7] might become:

[4,5,6,7,0,1,4] if it was rotated 4 times.
[0,1,4,4,5,6,7] if it was rotated 7 times.
Notice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].

Given the sorted rotated array nums that may contain duplicates, return the minimum element of this array.

You must decrease the overall operation steps as much as possible.


class Solution {
public:
    int x=INT_MAX;
    int solve(vector<int>v,int l,int h){
        int n=v.size();
        int mid=0;
        while(l<=h){
            mid=(l+h)/2;
            int next=(mid+1)%n;
            int prev=(mid-1+n)%n;
           // cout<<v[mid]<<" ";
            if(v[mid]>v[h])
                
            {   
               l=mid+1;
            }
            else if(v[mid]<v[h]){
             h=mid;
            }
            
            else  {
                h--;
            }
            
            
        }
        
        return v[l];
    }
    
    int findMin(vector<int>& nums) {
        
        return solve(nums,0,nums.size()-1);
    }
};
