https://leetcode.com/problems/subarray-sum-equals-k/


Given an array of integers nums and an integer k, return the total number of subarrays whose sum equals to k.

 

Example 1:

Input: nums = [1,1,1], k = 2
Output: 2
Example 2:

Input: nums = [1,2,3], k = 3
Output: 2


class Solution {
public:
    //int ans=0;
 
    
//     int solve(vector<int>&v,int k,int i,int &ans){
        
//         if(i<0)return 0;
//         if(i==0) {
//              if(k!=0 and v[0]==k){ans++;
//                  return 1;}
//             if(k==0){
//                 ans++;
//                 return 1;
//             }
            
//             return  0;
//         }
      
        
//         bool pick=solve(v,k-v[i],i-1,ans);
//        bool notpick=solve(v,k,i-1,ans);
        
//         return pick || notpick;
//     }
    
    
    
    //t=3
    // 1 2 3               m 0:1         m.find(cs-k) ==true 
    // cs +=1 then cs=1    1:1
    //cs+=2    cs=3         3:1
    //cs+=3    cs=6         6:1
    //
    //   3     6 means last wala 3 hihoga 
    // <----><--->
    //  1  3   6
    //  1  2   3
    //
    int subarraySum(vector<int>& nums, int k) {
        int ans=0;
       // solve(nums,k,nums.size()-1,ans);
        map<int,int>m;
        int cs=0;
  m[cs]++;
        for(int i=0;i<nums.size();i++)
        {
            cs+=nums[i];
            if(m.find(cs-k)!=m.end()) {
            
                ans+=m[cs-k];
            }
            
            m[cs]++;
          
         }
        return ans;
    }
};
