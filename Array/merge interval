https://leetcode.com/problems/merge-intervals/
Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.

class Solution {
public:
    vector<vector<int>> merge(vector<vector<int>>& v) {
         vector<vector<int>>ans;
        
        sort(v.begin(),v.end());
        stack<pair<int,int>>st;
        
        st.push({v[0][0],v[0][1]});
        
        
        for(int i=1;i<v.size();i++){
                
            auto it=st.top();
            //st.pop();
          //  cout<<it.second<<" ";
            if(it.second>=v[i][0]){
                int x=max(it.second,v[i][1]);
                st.pop();
                st.push({it.first,x});
                
            }
     else st.push({v[i][0],v[i][1]});
        }
        
        while(st.size()>0){
            
            auto it=st.top();
            
            ans.push_back({it.first,it.second});
            //cout<<it.first<<" "<<it.second<<endl;
            
            st.pop();
        }
        
        
        return ans;
    }
};
