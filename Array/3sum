
https://leetcode.com/problems/3sum/submissions/

Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []

------------------------------------------------------------------
class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
       
        
        int n=nums.size();
        sort(nums.begin(),nums.end());
        
        vector<vector<int>>ans;
        
        //if(nums.size()<=2)return ans;
        
 
        
        for(int i=0;i<n-2;i++){
            
            int l=i+1;
            int h=n-1;
          
            int target=-(nums[i]);
            if(i>0 and nums[i]==nums[i-1])continue;
            
            while(l<h){
             
                if(nums[l]+nums[h]>target)h--;
                else if(nums[l]+nums[h]<target)l++;
                
                else{
                    ans.push_back({nums[i],nums[l],nums[h]});
                    h--;
                    l++;
                    
                    while(nums[l]==nums[l-1] and nums[h]==nums[h+1]){
                        
                        h--;
                        l++;
                        if(l>=h)break;
                    }
                }
            }
        }
          return ans;  
    }
};
