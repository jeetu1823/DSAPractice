https://leetcode.com/problems/subarray-sums-divisible-by-k/

Given an integer array nums and an integer k, return the number of non-empty subarrays that have a sum divisible by k.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [4,5,0,-2,-3,1], k = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by k = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]

class Solution {
public:
   
    
    int subarraysDivByK(vector<int>& nums, int k) {
        
        int ans=0;
        
        map<int,int>m;
        int s=0;
        
        for(int i=0;i<nums.size();i++){
            
            s+=nums[i];
    // when you perform the modular operation with negative numbers it gives a 
    //negative result like -5%3 = -2, but what the result comes after the modular operation should be 
    //the range 0 to n-1 means the -5%3 = 1. So for this convert it into a positive modular //equivalent. 
            
            int r=(s%k+k)%k;
             
            
            if(r==0)ans++;
            
            if(m.find(r)!=m.end()){
                
                ans+=m[r];
            }
            
            m[r]++;
        }
   
        return ans;
        
    }
};
